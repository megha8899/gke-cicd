apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq-notifier
  labels:
    app: rabbitmq-notifier
spec:
  replicas: 3  # Number of pods to run
  selector:
    matchLabels:
      app: rabbitmq-notifier
  template:
    metadata:
      labels:
        app: rabbitmq-notifier
    spec:
      containers:
      - name: rabbitmq-notifier
        image: your-docker-image:latest  # Replace with your actual Docker image
        ports:
        - containerPort: 8080  # The port your app listens on
        env:
        - name: RABBITMQ_HOST
          value: "rabbitmq-service"  # RabbitMQ service name (should match the service name)
        - name: RABBITMQ_PORT
          value: "5672"  # Default RabbitMQ port
        - name: RABBITMQ_QUEUE
          value: "notifications"  # Name of the RabbitMQ queue
        volumeMounts:
        - name: config-volume
          mountPath: /etc/app-config  # Mount a ConfigMap or secret here, if required
      volumes:
      - name: config-volume
        configMap:
          name: app-config  # This must be a valid ConfigMap name in the same namespace
      imagePullSecrets:
      - name: regcred  # If using a private Docker registry, ensure this secret exists
---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq-notifier-service
spec:
  selector:
    app: rabbitmq-notifier  # Ensure this matches the label of the pods in the Deployment
  ports:
    - protocol: TCP
      port: 8080  # The port the service will expose internally in the cluster
      targetPort: 8080  # The port your app is listening on inside the pod
  clusterIP: None  # Optional: Headless service, allows for direct pod access (e.g., StatefulSet)
